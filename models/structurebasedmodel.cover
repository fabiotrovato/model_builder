    1: import numpy as np
       
    1: import potentials 
       
    1: from model import Model            
               
    2: class StructureBasedModel(Model):
       
    1:     def __init__(self, topology, bead_repr=None):
               """Structure-based Model (SBM)
       
               Parameters
               ----------
               topology : mdtraj.Topology object
                   An mdtraj Topology object that describes the molecular topology.
       
               bead_repr : str [CA, CACB]
                   A code specifying the desired coarse-grain mapping. The all-atom 
               to coarse-grain mapping.
               
               Methods
               -------
               assign_* : 
                   Methods assign which atoms have bonded constraints 
               (angle potentials, dihedral, etc.)
               
               add_* :
                   Methods add potentials to the Hamiltonian.
               
               """
       
           
       
    1:         Model.__init__(self, topology, bead_repr=bead_repr)
    1:         self.Hamiltonian = potentials.StructureBasedHamiltonian()
    1:         self.mapping.add_atoms()
                
    1:     def set_reference(self, traj):
               """Set the reference structure
               
               Parameters
               ----------
               traj : mdtraj.Trajectory object
                   Trajectory to be used as a reference (only uses first frame). The 
                   geometry of the reference structure is used to construct structure-
                   based potentials.
               """
    1:         self.ref_traj_aa = traj[0]
    1:         self.ref_traj = self.mapping.map_traj(traj[0])
       
    1:     def save_starting_conf(self, saveas="conf.gro"):
               if hasattr(self, "starting_traj"):
                   self.starting_traj.save(saveas)
               else:
                   self.ref_traj.save(saveas)
           
    1:     def assign_disulfides(self, disulfides, simple=False):
               self.mapping.add_disulfides(disulfides, simple=simple)
               
    1:     def assign_backbone(self):
    1:         self.mapping._assign_sbm_angles()
    1:         self.mapping._assign_sbm_dihedrals()
               
    1:     def assign_contacts(self):
               self.mapping._assign_sbm_contacts(self.ref_traj_aa)
               
    1:     def add_sbm_potentials(self):
               self.Hamiltonian.add_sbm_potentials(self) 
               
    1:     def add_sbm_backbone(self):
    1:         self.Hamiltonian.add_sbm_backbone(self)
               
    1:     def add_sbm_contacts(self):
               self.Hamiltonian._add_sbm_contacts(self)    
